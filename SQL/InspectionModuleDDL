----------------------------------------------------------------------------------------
-- Author: George Foster (TPXImpact)
--
-- Scripts below create the required tables in the Inspection Module
-- 
-- HazardType
-- InspectionHazard
-- HazardReport
-- Inspection
-- Notification
-- Escalation
----------------------------------------------------------------------------------------
-- NOTES
-- 
----------------------------------------------------------------------------------------

-- Create HazardType table
CREATE TABLE HazardType (
    HazardTypeID INT PRIMARY KEY IDENTITY(1,1),
    HazardType NVARCHAR(50) NOT NULL,
    HealthRiskRatingID INT NOT NULL FOREIGN KEY REFERENCES HealthRiskRating(HealthRiskRatingID),
    Category NVARCHAR(500) NULL
);

-- Create InspectionHazard table
CREATE TABLE InspectionHazard (
    InspectionHazardID INT PRIMARY KEY IDENTITY(1,1),
    HazardTypeID INT NOT NULL FOREIGN KEY REFERENCES HazardType(HazardTypeID),
    InspectionID INT NOT NULL FOREIGN KEY REFERENCES Inspection(InspectionID),
    HazardReportID INT NOT NULL FOREIGN KEY REFERENCES HazardReport(HazardReportID),
    SeverityID INT NOT NULL FOREIGN KEY REFERENCES Severity(SeverityID),
    Notes NVARCHAR(500) NULL
);

-- Create HazardReport table
CREATE TABLE HazardReport (
    HazardReportID INT PRIMARY KEY IDENTITY(1,1),
    PropertyID INT NOT NULL FOREIGN KEY REFERENCES Property(PropertyID), 
    TenantID INT NOT NULL FOREIGN KEY REFERENCES Tenant(TenantID),
    DateReported DATE NOT NULL,
    ReportedBy INT NOT NULL, --TenantID,StaffID,etc
    Description NVARCHAR(500),
    PhotoEvidence NVARCHAR(500),
    LocationDetails NVARCHAR(500),
    InvestigationTypeID INT NOT NULL FOREIGN KEY REFERENCES InvestigationType(InvestigationTypeID), 
    InvestigationDueDate DATE,
    EmergencyActionTaken BIT,
    MadeSafeDate DATE,
    FurtherWorkRequired BIT,
    FurtherWorkDueDate DATE,
    ReportStatusID INT FOREIGN KEY REFERENCES ReportStatus(ReportStatusID)
);

-- Create Inspection table
CREATE TABLE Inspection (
    InspectionID INT PRIMARY KEY IDENTITY(1,1),
    PropertyID INT NOT NULL FOREIGN KEY REFERENCES Property(PropertyID),
    TenantID INT NOT NULL FOREIGN KEY REFERENCES Tenant(TenantID),
    TenancyID INT NOT NULL FOREIGN KEY REFERENCES Tenancy(TenancyID),
    TriggerSourceID INT NOT NULL FOREIGN KEY REFERENCES TriggerSource(TriggerSourceID),
    HazardReportedDate DATE NOT NULL,
    InspectionScheduledDate DATE NOT NULL,
    InspectionCompletedDate DATE,
    InspectorName NVARCHAR(30),
    HazardConfirmed BIT,
    RepairRequired BIT,
    RepairScheduledDate DATE,
    RepairCompletedDate DATE,
    SLABreachFlag BIT,
    EscalationStatusID INT NOT NULL FOREIGN KEY REFERENCES EscalationStatus(EscalationStatusID),
    NotificationSentToTenant BIT,
    InspectionNotes NVARCHAR(500)
);

-- Create Notification table
CREATE TABLE Notification (
    NotificationID INT PRIMARY KEY IDENTITY(1,1),
    InspectionID INT NOT NULL FOREIGN KEY REFERENCES Inspection(InspectionID),
    TenantID INT NOT NULL FOREIGN KEY REFERENCES Tenant(TenantID),
    WorkOrderID INT NOT NULL FOREIGN KEY REFERENCES WorkOrder(WorkOrderID),
    NotificationTypeID INT NOT NULL FOREIGN KEY REFERENCES NotificationType(NotificationTypeID), 
    DateSent DATE,
    Method NVARCHAR(6), --Email, SMS, Letter
    ContentSummary NVARCHAR(500)
);

-- Create Escalation table
CREATE TABLE Escalation (
    EscalationID INT PRIMARY KEY IDENTITY(1,1),
    InspectionID INT NOT NULL FOREIGN KEY REFERENCES Inspection(InspectionID),
    EscalationReason NVARCHAR(30),
    EscalationStageID INT NOT NULL FOREIGN KEY REFERENCES EscalationStage(EscalationStageID),
    EscalationType NVARCHAR(15),
    EscalatedTo NVARCHAR(50),
    EscalationStartDate DATE,
    EscalationEndDate DATE,
    ActionTaken NVARCHAR(500),
    CompensationOffered BIT,
    CompensationAmount DECIMAL(10,2), --May need updating to reflect potential compensation amounts
    AlternativeAccomodationOffered BIT,
    AlternativeAccomodationDetails NVARCHAR(500),
    TenantAcceptance BIT,
    EscalationNotes NVARCHAR(500)
);

----------------------------------------------------------------------------------------
-- Code lists
-- Scripts below create the required code lists and populate the options
----------------------------------------------------------------------------------------

-- HealthRiskRating Table
CREATE TABLE HealthRiskRating (
    HealthRiskRatingID INT PRIMARY KEY IDENTITY(1,1),
    HealthRiskRating NVARCHAR(6) NOT NULL
);
INSERT INTO HealthRiskRating (HealthRiskRating)
VALUES ('High'), ('Medium'), ('Low');

-- Severity Table
CREATE TABLE Severity (
    SeverityID INT PRIMARY KEY IDENTITY(1,1),
    Severity NVARCHAR(6) NOT NULL
);
INSERT INTO Severity (Severity)
VALUES ('High'), ('Medium'), ('Low');

-- InspectionType Table
CREATE TABLE InvestigationType (
    InvestigationTypeID INT PRIMARY KEY IDENTITY(1,1),
    InvestigationType NVARCHAR(9) NOT NULL
);
INSERT INTO InspectionType (InspectionType)
VALUES ('Standard'), ('Renewed'), ('Further'), ('Emergency');

-- ReportStatus Table
CREATE TABLE ReportStatus (
    ReportStatusID INT PRIMARY KEY IDENTITY(1,1),
    ReportStatus NVARCHAR(15) NOT NULL
);
INSERT INTO ReportStatus (ReportStatus)
VALUES ('Open'), ('Under Review'), ('Made Safe'), ('Closed');

-- TriggerSource Table
CREATE TABLE TriggerSource (
    TriggerSourceID INT PRIMARY KEY IDENTITY(1,1),
    TriggerSource NVARCHAR(20) NOT NULL
);
INSERT INTO TriggerSource (TriggerSource)
VALUES ('Tenant Report'), ('Routine Check'), ('Environmental Sensor'), ('Staff Report');

-- EscalationStatus Table
CREATE TABLE EscalationStatus (
    EscalationStatusID INT PRIMARY KEY IDENTITY(1,1),
    EscalationStatus NVARCHAR(12) NOT NULL
);
INSERT INTO EscalationStatus (EscalationStatus)
VALUES ('None'), ('In Progress'), ('Escalated');

-- NotificationType Table
CREATE TABLE NotificationType (
    NotificationTypeID INT PRIMARY KEY IDENTITY(1,1),
    NotificationType NVARCHAR(10) NOT NULL
);
INSERT INTO NotificationType (NotificationType)
VALUES ('Scheduled'), ('Result'), ('Advice'), ('Delay');

-- EscalationStage Table
CREATE TABLE EscalationStage (
    EscalationStageID INT PRIMARY KEY IDENTITY(1,1),
    EscalationStage NVARCHAR(10)
);
INSERT INTO EscalationStage (EscalationStage)
VALUES ('Open'), ('In Progress'), ('Resolved'), ('Rejected');
